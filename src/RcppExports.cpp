// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// original_center
mat original_center(mat data, int k);
RcppExport SEXP _cluster_original_center(SEXP dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(original_center(data, k));
    return rcpp_result_gen;
END_RCPP
}
// distEuclid
double distEuclid(rowvec v1, rowvec v2);
RcppExport SEXP _cluster_distEuclid(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< rowvec >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< rowvec >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(distEuclid(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// isodata
vec isodata(mat data, int k);
RcppExport SEXP _cluster_isodata(SEXP dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(isodata(data, k));
    return rcpp_result_gen;
END_RCPP
}
// distEclud
double distEclud(rowvec v1, rowvec v2);
RcppExport SEXP _cluster_distEclud(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< rowvec >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< rowvec >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(distEclud(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// kmeans_c
rowvec kmeans_c(mat data, int k);
RcppExport SEXP _cluster_kmeans_c(SEXP dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_c(data, k));
    return rcpp_result_gen;
END_RCPP
}
// distManhattan
//2.¼ÆËãÂü¹þ¶Ù¾àÀë double distManhattan(rowvec v1, rowvec v2);
RcppExport SEXP _cluster_distManhattan(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< rowvec >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< rowvec >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(distManhattan(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// kmedians
rowvec kmedians(mat data, int k);
RcppExport SEXP _cluster_kmedians(SEXP dataSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kmedians(data, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cluster_original_center", (DL_FUNC) &_cluster_original_center, 2},
    {"_cluster_distEuclid", (DL_FUNC) &_cluster_distEuclid, 2},
    {"_cluster_isodata", (DL_FUNC) &_cluster_isodata, 2},
    {"_cluster_distEclud", (DL_FUNC) &_cluster_distEclud, 2},
    {"_cluster_kmeans_c", (DL_FUNC) &_cluster_kmeans_c, 2},
    {"_cluster_distManhattan", (DL_FUNC) &_cluster_distManhattan, 2},
    {"_cluster_kmedians", (DL_FUNC) &_cluster_kmedians, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cluster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
